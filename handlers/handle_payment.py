# import os
# from typing import Optionalimport logging
import re
from typing import Any
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from filters.config import GROUP_ID
from filters.chat_types import ChatTypeFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import UserFSM
from dotenv import load_dotenv

from kbds import inline

load_dotenv()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
handle_payment_router = Router()
handle_payment_router.message.filter(ChatTypeFilter(["private"]))


def safe_message(text: str) -> str:
    escape_chars = r"\_*[]()~`>#+-=|{}.!"
    return ''.join(
        f'\\{char}' if char in escape_chars else char
        for char in text
    )

# def escape_markdown(text: Any) -> str:
#     """
#     –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2.
#     –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç None –≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
#     """
#     if not isinstance(text, str):
#         text = str(text) if text is not None else ""
#     return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    clicked_buttons = State()  # –°–ø–∏—Å–æ–∫ –Ω–∞–∂–∞—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫
    feedback = State()
    name = State()
    contacts = State()


BUTTONS = {
    "main_payment": "üí≥ –û–ø–ª–∞—Ç–∞",
    # "main_feedback": "üì¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
    "main_cart": "üõí –ö–æ—Ä–∑–∏–Ω–∞",
    "main_products": "‚úÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã"
}


@handle_payment_router.callback_query(lambda c: c.data == "main_feedback")
async def handle_feedback_main(callback: CallbackQuery, state: FSMContext):
    await state.update_data(feedback="üì¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    await state.set_state(UserState.name)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ')


@handle_payment_router.message(UserState.name, F.text)
async def handle_name_main(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(UserState.contacts)

    await message.answer(
        'üìû –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ (Telegram, WhatsApp):')


@handle_payment_router.message(UserState.contacts, F.text)
async def handle_contacts_main(message: Message, state: FSMContext):
    await state.update_data(contacts=message.text)
    await message.answer("‚úÖ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.",
                         reply_markup=inline.inline_confirm_payment)


@handle_payment_router.callback_query(F.data == "confirm_request", UserState.contacts)
async def confirm_request(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession  # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
):
    if isinstance(callback.message, Message):
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        data = await state.get_data()

        new_order = UserFSM(
            user_id=callback.from_user.id,
            user_name=callback.from_user.full_name,
            name=data.get("name"),
            contacts=data.get("contacts"),
            feedback=data.get("feedback"),
        )

        async with session.begin():
            session.add(new_order)
        await session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
        order_info = (
            "üõí *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –±–æ—Ç–µ\!*\n"
            f"üë§ *ID:* `{safe_message(str(callback.from_user.id))}`\n"
            f"üë§ *–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{safe_message(callback.from_user.full_name)}`\n"
            f"üë§ *–ò–º—è:* `{safe_message(str(data.get('name', '‚Äî')))}`\n"
            f"üë§ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* `{safe_message(str(data.get('contacts', '‚Äî')))}`"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        if GROUP_ID and callback.bot:
            try:
                await callback.bot.send_message(
                    chat_id=int(GROUP_ID),
                    text=order_info,
                    parse_mode="MarkdownV2"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", show_alert=True)
                return

        # 6. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! ‚úÖ")
        await state.clear()
        await callback.answer()


# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ "main_..."
# @handle_payment_router.callback_query(F.data.startswith("main_"))
# async def handle_main_buttons(callback: CallbackQuery, state: FSMContext):
#     button_type = callback.data  # –ü–æ–ª—É—á–∞–µ–º callback_data
#     data = await state.get_data()
#     clicked_buttons = data.get("clicked_buttons", [])

#     # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
#     if "main_" not in clicked_buttons:
#         clicked_buttons.append(button_type)
#     # # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫
#     # clicked_buttons.append(button_type)

#     await state.update_data(clicked_buttons=clicked_buttons)

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     if callback.message is None:
#         await callback.answer()  # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å
#         return
#     # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "üì¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
#     if button_type == "main_feedback":
#         await state.set_state(UserState.contac)  # –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
#         await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
#     else:
#         await callback.answer()
# __________________________


# @handle_payment_router.callback_query(F.data == "confirm_request", UserState.feedback)
# async def confirm_request(
#     callback: CallbackQuery,
#     state: FSMContext,
#     session: AsyncSession  # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
# ):
#     # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
#     data = await state.get_data()
#     clicked_buttons = data.get("clicked_buttons", [])

#     # 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
#     formatted_buttons = []
#     for btn in clicked_buttons:
#         # –ë–µ—Ä–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ
#         formatted_buttons.append(BUTTONS.get(btn, btn.replace('main_', '')))

#     if not clicked_buttons:
#         await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
#         return

#     # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
#     order_info = (
#         f"üõí *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –±–æ—Ç–µ!*\n"
#         f"üë§ ID: `{callback.from_user.id}`\n"
#         f"üë§ –ò–º—è: `{callback.from_user.full_name}`\n"
#         f"üìã –ù–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏:\n" +
#         "\n".join([f"üîπ `{btn.replace('main_', '')}`" for btn in clicked_buttons])
#     )

#     # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
#     try:
#         new_request = UserFSM(
#             user_id=callback.from_user.id,
#             user_name=callback.from_user.full_name,
#             request_data=", ".join(clicked_buttons),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
#             feedback="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞"  # –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
#         )

#         session.add(new_request)
#         await session.commit()
#     except Exception as db_error:
#         await session.rollback()
#         print(f"–û—à–∏–±–∫–∞ –ë–î: {db_error}")
#         await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
#         return

#     # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
#     if GROUP_ID_ENV and callback.bot:
#         try:
#             await callback.bot.send_message(
#                 chat_id=int(GROUP_ID_ENV),
#                 text=order_info,
#                 parse_mode="Markdown"
#             )
#         except Exception as e:
#             print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
#             await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", show_alert=True)
#             return
#     else:
#         print(f"GROUP_ID_ENV: {GROUP_ID_ENV}, bot: {callback.bot}")
#         await callback.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", show_alert=True)
#         return

#     # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await callback.message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! ‚úÖ")
#     await state.clear()
#     await callback.answer()
