import os
from typing import Optional
from aiogram import Bot, Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from filters.chat_types import ChatTypeFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

from text_message import text
from kbds import inline

load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º GROUP_ID
GROUP_ID_ENV = os.getenv('GROUP_ID')
GROUP_ID: Optional[int] = int(GROUP_ID_ENV) if GROUP_ID_ENV and GROUP_ID_ENV.isdigit() else None

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
handle_payment_router = Router()
handle_payment_router.message.filter(ChatTypeFilter(['private']))


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    clicked_buttons = State()  # –°–ø–∏—Å–æ–∫ –Ω–∞–∂–∞—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫
    feedback = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
@handle_payment_router.callback_query(F.data.startswith('main_payment'))
async def handle_payment(callback: CallbackQuery):
    if not callback.data:
        return
    if not isinstance(callback.message, Message):
        return await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await callback.message.answer(
        text.payment_text, reply_markup=inline.inline_back_main
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ "main_..."
@handle_payment_router.callback_query(F.data.startswith("main_"))
async def handle_main_buttons(callback: CallbackQuery, state: FSMContext):
    button_type = callback.data  # –ü–æ–ª—É—á–∞–µ–º callback_data
    data = await state.get_data()
    clicked_buttons = data.get("clicked_buttons", [])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫
    clicked_buttons.append(button_type)
    await state.update_data(clicked_buttons=clicked_buttons)

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "üì¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if button_type == "main_feedback":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="confirm_request")]
            ]
        )
        await state.set_state(UserState.feedback)  # –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É:", reply_markup=keyboard)
    else:
        await callback.answer()


@handle_payment_router.callback_query(F.data == "confirm_request", UserState.feedback)
async def confirm_request(callback: CallbackQuery, state: FSMContext):
    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    clicked_buttons = data.get("clicked_buttons", [])

    if not clicked_buttons:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
        return

    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)
    order_info = (
        f"üõí *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –±–æ—Ç–µ!*\n"
        f"üë§ ID: `{callback.from_user.id}`\n"
        f"üë§ –ò–º—è: `{callback.from_user.full_name}`\n"
        f"üìã –ù–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏:\n" +
        "\n".join([f"üîπ `{btn.replace('main_', '')}`" for btn in clicked_buttons])
    )

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É (–∫–∞–∫ –≤ –†–ê–ë–û–ß–ï–ú –∫–æ–¥–µ)
    if GROUP_ID_ENV and callback.bot:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback.bot
        try:
            await callback.bot.send_message(
                chat_id=int(GROUP_ID_ENV),  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                text=order_info,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
            return
    else:
        print(f"GROUP_ID_ENV: {GROUP_ID_ENV}, bot: {callback.bot}")
        await callback.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", show_alert=True)
        return

    # 4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ)
    await callback.message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! ‚úÖ")
    await state.clear()
    await callback.answer()
