import os
from typing import Optional
from aiogram import Bot, Router, F
from aiogram.types import CallbackQuery, Message
from filters.chat_types import ChatTypeFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import UserFSM
from dotenv import load_dotenv

from text_message import text
from kbds import inline

load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º GROUP_ID
GROUP_ID_ENV = os.getenv("GROUP_ID")
GROUP_ID: Optional[int] = (
    int(GROUP_ID_ENV) if GROUP_ID_ENV and GROUP_ID_ENV.isdigit() else None
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
handle_payment_router = Router()
handle_payment_router.message.filter(ChatTypeFilter(["private"]))


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    clicked_buttons = State()  # –°–ø–∏—Å–æ–∫ –Ω–∞–∂–∞—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫
    feedback = State()
    created_at = State()
    updated_at = State()


BUTTONS = {
    "main_payment": "üí≥ –û–ø–ª–∞—Ç–∞",
    "main_feedback": "üì¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
    "main_cart": "üõí –ö–æ—Ä–∑–∏–Ω–∞",
    "main_products": "‚úÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã"
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ "main_..."
@handle_payment_router.callback_query(F.data.startswith("main_"))
async def handle_main_buttons(callback: CallbackQuery, state: FSMContext):
    button_type = callback.data  # –ü–æ–ª—É—á–∞–µ–º callback_data
    data = await state.get_data()
    clicked_buttons = data.get("clicked_buttons", [])

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if "main_" not in clicked_buttons:
        clicked_buttons.append(button_type)
    # # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫
    # clicked_buttons.append(button_type)

    await state.update_data(clicked_buttons=clicked_buttons)

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "üì¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if button_type == "main_feedback":
        await state.set_state(UserState.feedback)  # –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É:",
                                      reply_markup=inline.inline_confirm_payment)
    else:
        await callback.answer()


@handle_payment_router.callback_query(F.data == "confirm_request", UserState.feedback)
async def confirm_request(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession  # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
):
    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    clicked_buttons = data.get("clicked_buttons", [])

    if not clicked_buttons:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
        return

    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å —á–∏—Ç–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫
    formatted_buttons = [BUTTONS.get(btn, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞") for btn in clicked_buttons]

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    order_info = (
        f"üõí *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –±–æ—Ç–µ!*\n"
        f"üë§ ID: `{callback.from_user.id}`\n"
        f"üë§ –ò–º—è: `{callback.from_user.full_name}`\n"
        f"üìã –ù–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏:\n" +
        "\n".join([f"üîπ {btn}" for btn in formatted_buttons])
    )

    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
    try:
        new_request = UserFSM(
            user_id=callback.from_user.id,
            user_name=callback.from_user.full_name,
            request_data=", ".join(formatted_buttons),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            feedback="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞"
        )

        session.add(new_request)
        await session.commit()
    except Exception as db_error:
        await session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ë–î: {db_error}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        return

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    try:
        await callback.bot.send_message(
            chat_id=int(GROUP_ID_ENV),
            text=order_info,
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", show_alert=True)
        return

    # 6. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! ‚úÖ")
    await state.clear()
    await callback.answer()


# @handle_payment_router.callback_query(F.data == "confirm_request", UserState.feedback)
# async def confirm_request(
#     callback: CallbackQuery,
#     state: FSMContext,
#     session: AsyncSession  # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
# ):
#     # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
#     data = await state.get_data()
#     clicked_buttons = data.get("clicked_buttons", [])

#     # 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
#     formatted_buttons = []
#     for btn in clicked_buttons:
#         # –ë–µ—Ä–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ
#         formatted_buttons.append(BUTTONS.get(btn, btn.replace('main_', '')))

#     if not clicked_buttons:
#         await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
#         return

#     # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
#     order_info = (
#         f"üõí *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –±–æ—Ç–µ!*\n"
#         f"üë§ ID: `{callback.from_user.id}`\n"
#         f"üë§ –ò–º—è: `{callback.from_user.full_name}`\n"
#         f"üìã –ù–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏:\n" +
#         "\n".join([f"üîπ `{btn.replace('main_', '')}`" for btn in clicked_buttons])
#     )

#     # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
#     try:
#         new_request = UserFSM(
#             user_id=callback.from_user.id,
#             user_name=callback.from_user.full_name,
#             request_data=", ".join(clicked_buttons),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
#             feedback="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞"  # –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
#         )

#         session.add(new_request)
#         await session.commit()
#     except Exception as db_error:
#         await session.rollback()
#         print(f"–û—à–∏–±–∫–∞ –ë–î: {db_error}")
#         await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
#         return

#     # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
#     if GROUP_ID_ENV and callback.bot:
#         try:
#             await callback.bot.send_message(
#                 chat_id=int(GROUP_ID_ENV),
#                 text=order_info,
#                 parse_mode="Markdown"
#             )
#         except Exception as e:
#             print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
#             await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", show_alert=True)
#             return
#     else:
#         print(f"GROUP_ID_ENV: {GROUP_ID_ENV}, bot: {callback.bot}")
#         await callback.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", show_alert=True)
#         return

#     # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await callback.message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! ‚úÖ")
#     await state.clear()
#     await callback.answer()
